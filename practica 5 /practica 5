#include <stdio.h>
#define MAX 5

typedef struct {
    int datos[MAX];
    int tope;
} Pila;

typedef struct {
    int datos[MAX];
    int frente;
    int final;
} Cola;

// Funciones para la pila
void inicializarPila(Pila *p) {
    p->tope = -1;
    printf("Pila inicializada vacia.\n");
}

int pilaLlena(Pila *p) {
    return p->tope == MAX - 1;
}

int pilaVacia(Pila *p) {
    return p->tope == -1;
}

void push(Pila *p, int valor) {
    if (pilaLlena(p))
        printf("La pila esta llena.\n");
    else {
        p->datos[++(p->tope)] = valor;
        printf("Elemento %d apilado.\n", valor);
    }
}

int pop(Pila *p) {
    if (pilaVacia(p)) {
        printf("La pila esta vacia.\n");
        return -1;
    } else {
        int valor = p->datos[(p->tope)--];
        printf("Elemento %d desapilado.\n", valor);
        return valor;
    }
}

void mostrarPila(Pila *p) {
    if (pilaVacia(p))
        printf("Pila vacia.\n");
    else {
        printf("Estado de la pila: ");
        for (int i = 0; i <= p->tope; i++)
            printf("%d ", p->datos[i]);
        printf("\n");
    }
}

// Funciones para la cola
void inicializarCola(Cola *c) {
    c->frente = 0;
    c->final = -1;
    printf("Cola inicializada vacia.\n");
}

int colaLlena(Cola *c) {
    return c->final == MAX - 1;
}

int colaVacia(Cola *c) {
    return c->frente > c->final;
}

void enqueue(Cola *c, int valor) {
    if (colaLlena(c))
        printf("La cola esta llena.\n");
    else {
        c->datos[++(c->final)] = valor;
        printf("Elemento %d encolado.\n", valor);
    }
}

int dequeue(Cola *c) {
    if (colaVacia(c)) {
        printf("La cola esta vacia.\n");
        return -1;
    } else {
        int valor = c->datos[(c->frente)++];
        printf("Elemento %d desencolado.\n", valor);
        return valor;
    }
}

void mostrarCola(Cola *c) {
    if (colaVacia(c))
        printf("Cola vacía.\n");
    else {
        printf("Estado de la cola: ");
        for (int i = c->frente; i <= c->final; i++)
            printf("%d ", c->datos[i]);
        printf("\n");
    }
}


int main() {
    Pila pila;
    Cola cola;
    int n, valor;

    inicializarPila(&pila);

    printf("\n¿Cuantos elementos quieres apilar? (máximo %d): ", MAX);
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        printf("Elemento %d: ", i + 1);
        scanf("%d", &valor);
        push(&pila, valor);
        mostrarPila(&pila);
    }

    printf("\n¿Cuántos elementos quieres desapilar?: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        pop(&pila);
        mostrarPila(&pila);
    }

    inicializarCola(&cola);

    printf("\n¿Cuantos elementos quieres encolar? (máximo %d): ", MAX);
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        printf("Elemento %d: ", i + 1);
        scanf("%d", &valor);
        enqueue(&cola, valor);
        mostrarCola(&cola);
    }

    printf("\n¿Cuantos elementos quieres desencolar?: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        dequeue(&cola);
        mostrarCola(&cola);
    }

    printf("Comparación\n");
    printf("Pila → LIFO (último en entrar, primero en salir)\n");
    printf("Cola → FIFO (primero en entrar, primero en salir)\n");

    return 0;
}


//1. ¿Qué diferencias notaron entre el orden de salida de la pila y de la cola?
//Que en la pila el ultimo que entra es el primero que sale y en la cola el primero que entra primero que sale

//2. ¿Qué sucede si intentan hacer pop en una pila vacía o dequeue en una cola vacía?
// Se hace un error logico a menos que pongas un condicional para que no se haga

//3. ¿Qué sucede si intentan insertar más elementos que la capacidad máxima?
// No se guardan los datos escritos por desbordacion de memora a menos que se ponga un condicional para advertir al usuario
